version: "3.2"
services:
  taskqueue:
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --port 6379 --loglevel warning
    volumes:
      - redis_cache:/data
    networks:
      - taskqueue
  rabbit_mq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/usr/share/rabbitmq/data
    networks:
      - rabbitmq
  batteries_db:
    image: postgres
    ports:
      - '5432:5432'
    restart: always
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: batteries_db
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "my_db", "-U" ]
      timeout: 45s
      interval: 10s
      retries: 10
    # https://stackoverflow.com/questions/41637505/how-to-persist-data-in-a-dockerized-postgres-database-using-volumes
    volumes:
      - ./postgres-data-batteries:/var/lib/postgresql/data-batteries
      - postgres-data-batteries:/var/lib/postgresql/data-batteries
      - pgdata-batteries:/var/lib/postgresql/data-batteries
    # Makes DB slightly more performant
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "synchronous_commit=off"
    networks:
      - batteries_db_network
  users_db:
    image: postgres
    ports:
      - '5433:5433'
    restart: always
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: users_db
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "my_db", "-U" ]
      timeout: 45s
      interval: 10s
      retries: 10
    # https://stackoverflow.com/questions/41637505/how-to-persist-data-in-a-dockerized-postgres-database-using-volumes
    volumes:
      - ./postgres-data-users:/var/lib/postgresql/data-users
      - postgres-data-users:/var/lib/postgresql/data-users
      - pgdata-users:/var/lib/postgresql/data-users
    # Makes DB slightly more performant
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "synchronous_commit=off"
    networks:
      - users_db_network
  adminer:
    image: adminer
    restart: always
    depends_on:
      - users_db
      - batteries_db
    ports:
      - '8080:8080'
    networks:
      - users_db_network
      - batteries_db_network
  gateway:
    ports:
      - '5000:5000'
    depends_on:
      - taskqueue
      - rabbit_mq
    build:
      context: .
      dockerfile: ./Gateway/Dockerfile
    networks:
      - rabbitmq
      - taskqueue
      - public
  batterymanagement:
    depends_on:
      - taskqueue
      - rabbit_mq
      - batteries_db
    build:
      context: .
      dockerfile: ./BatteryManagement/Dockerfile
    networks:
      - rabbitmq
      - taskqueue
      - batteries_db_network
  disco:
    depends_on:
      - rabbit_mq
      - taskqueue
    build:
      context: .
      dockerfile: ./Disco/Dockerfile
    networks:
      - rabbitmq
      - taskqueue
  usermanagement:
    depends_on:
      - users_db
      - rabbit_mq
      - taskqueue
    build:
      context: .
      dockerfile: ./UserManagement/Dockerfile
    networks:
      - rabbitmq
      - taskqueue
      - users_db_network
  webgui:
    ports:
      - '5001:5001'
    depends_on:
      - gateway
    build: ./webapp
    networks:
      - public
volumes:
  redis_cache:
    driver: local
  rabbitmq_data:
    driver: local
  pgdata-batteries:
    driver: local
  pgdata-users:
    driver: local
  postgres-data-batteries:
    driver: local
  postgres-data-users:
    driver: local
networks:
  rabbitmq:
    driver: bridge
  taskqueue:
    driver: bridge
  users_db_network:
    driver: bridge
  batteries_db_network:
    driver: bridge
  public:
    driver: bridge